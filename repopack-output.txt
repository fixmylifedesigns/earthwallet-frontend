This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-07-09T17:43:18.637Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
eslint.config.js
index.html
package.json
postcss.config.js
public/vite.svg
README.md
src/App.css
src/App.jsx
src/assets/react.svg
src/index.css
src/main.jsx
src/pages/ApiTestDashboard.jsx
src/pages/EarthWalletProjectPage.jsx
src/pages/index.js
src/pages/KioskDashboard.jsx
src/pages/LandingPage.jsx
src/pages/Wallet.jsx
tailwind.config.js
vite.config.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "api-test-dashboard",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "firebase": "^11.10.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.6.3"
  },
  "devDependencies": {
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.3",
    "autoprefixer": "^10.4.20",
    "eslint": "^8.57.1",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.16",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17",
    "vite": "^5.4.11"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.

================
File: src/App.css
================
#root {
  /* max-width: 1280px; */
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

================
File: src/App.jsx
================
import React, { useState, useEffect } from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";

import { initializeApp } from "firebase/app";
import {
  getAuth,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signInWithPopup,
  GoogleAuthProvider,
  signOut,
  onAuthStateChanged,
} from "firebase/auth";
// import ApiTestDashboard from './ApiTestDashboard';
import {
  LandingPage,
  Wallet,
  KioskDashboard as Kiosk,
  EarthWalletProjectPage,
} from "./pages/index";
import "./index.css";
import ApiTestDashboard from "./pages/ApiTestDashboard";
// Firebase configuration - replace with your actual config
const firebaseConfig = {
  apiKey: "AIzaSyA8979XJxMW_2Iaqqj_9IqS4oSQSqSQtR0",
  authDomain: "fixmylife-1e1cd.firebaseapp.com",
  projectId: "fixmylife-1e1cd",
  storageBucket: "fixmylife-1e1cd.firebasestorage.app",
  messagingSenderId: "369367813832",
  appId: "1:369367813832:web:c465768fd70704d1a9dffd",
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const googleProvider = new GoogleAuthProvider();

const App = () => {
  const [user, setUser] = useState(null);
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [authMode, setAuthMode] = useState("login"); // 'login' or 'signup'
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  // Listen for authentication state changes
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setUser(user);
    });
    return () => unsubscribe();
  }, []);

  const handleAuth = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    try {
      if (authMode === "login") {
        await signInWithEmailAndPassword(auth, email, password);
      } else {
        await createUserWithEmailAndPassword(auth, email, password);
      }
      setShowAuthModal(false);
      setEmail("");
      setPassword("");
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    setLoading(true);
    setError("");

    try {
      await signInWithPopup(auth, googleProvider);
      setShowAuthModal(false);
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSignOut = async () => {
    try {
      await signOut(auth);
    } catch (error) {
      console.error("Error signing out:", error);
    }
  };

  const openAuthModal = (mode) => {
    setAuthMode(mode);
    setShowAuthModal(true);
    setError("");
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50  w-full">
      {/* Navigation */}
      <nav className="bg-white shadow-lg">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <h1 className="text-2xl font-bold text-green-600">
                  EarthWallet
                </h1>
              </div>
              <div className="hidden md:block">
                <div className="ml-10 flex items-baseline space-x-4">
                  <a
                    href="#features"
                    className="text-gray-600 hover:text-green-600 px-3 py-2 rounded-md text-sm font-medium"
                  >
                    Features
                  </a>
                  <a
                    href="#how-it-works"
                    className="text-gray-600 hover:text-green-600 px-3 py-2 rounded-md text-sm font-medium"
                  >
                    How It Works
                  </a>
                  <a
                    href="#contact"
                    className="text-gray-600 hover:text-green-600 px-3 py-2 rounded-md text-sm font-medium"
                  >
                    Contact
                  </a>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              {user ? (
                <div className="flex items-center space-x-4">
                  <span className="text-gray-700">Welcome, {user.email}</span>
                  <button
                    onClick={handleSignOut}
                    className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md text-sm font-medium"
                  >
                    Sign Out
                  </button>
                </div>
              ) : (
                <>
                  <button
                    onClick={() => openAuthModal("login")}
                    className="text-green-600 hover:text-green-700 px-3 py-2 rounded-md text-sm font-medium"
                  >
                    Log In
                  </button>
                  <button
                    onClick={() => openAuthModal("signup")}
                    className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md text-sm font-medium"
                  >
                    Sign Up
                  </button>
                </>
              )}
            </div>
          </div>
        </div>
      </nav>
      <Router>
        <Routes>
          <Route
            path="/"
            element={<LandingPage openAuthModal={openAuthModal} user={user} />}
          />
          <Route path="/kiosk" element={<Kiosk />} />
          <Route path="/test" element={<ApiTestDashboard user={user} />} />
          <Route path="/wallet" element={<Wallet user={user} />} />
          <Route path="/project-page" element={<EarthWalletProjectPage />} />
        </Routes>
      </Router>
      {/* Authentication Modal */}
      {showAuthModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold text-gray-900">
                {authMode === "login" ? "Sign In" : "Create Account"}
              </h2>
              <button
                onClick={() => setShowAuthModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ✕
              </button>
            </div>

            <div className="space-y-4">
              {/* Google Sign In Button */}
              <button
                onClick={handleGoogleSignIn}
                disabled={loading}
                className="w-full flex items-center justify-center px-4 py-2 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 disabled:bg-gray-100"
              >
                <svg className="w-5 h-5 mr-2" viewBox="0 0 24 24">
                  <path
                    fill="#4285F4"
                    d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                  />
                  <path
                    fill="#34A853"
                    d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                  />
                  <path
                    fill="#FBBC05"
                    d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                  />
                  <path
                    fill="#EA4335"
                    d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                  />
                </svg>
                {loading ? "Signing in..." : `Continue with Google`}
              </button>

              <div className="relative">
                <div className="absolute inset-0 flex items-center">
                  <div className="w-full border-t border-gray-300" />
                </div>
                <div className="relative flex justify-center text-sm">
                  <span className="px-2 bg-white text-gray-500">
                    Or continue with email
                  </span>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Email Address
                </label>
                <input
                  type="email"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                  placeholder="your@email.com"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Password
                </label>
                <input
                  type="password"
                  required
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-green-500"
                  placeholder="Enter your password"
                />
              </div>

              {error && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                  {error}
                </div>
              )}

              <button
                onClick={handleAuth}
                disabled={loading}
                className="w-full bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md font-medium disabled:bg-gray-400"
              >
                {loading ? (
                  <span className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    {authMode === "login"
                      ? "Signing In..."
                      : "Creating Account..."}
                  </span>
                ) : authMode === "login" ? (
                  "Sign In"
                ) : (
                  "Create Account"
                )}
              </button>
            </div>

            <div className="mt-4 text-center">
              <button
                onClick={() =>
                  setAuthMode(authMode === "login" ? "signup" : "login")
                }
                className="text-green-600 hover:text-green-700 text-sm"
              >
                {authMode === "login"
                  ? "Don't have an account? Sign up"
                  : "Already have an account? Sign in"}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default App;

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

/* body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
} */

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

================
File: src/main.jsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

================
File: src/pages/ApiTestDashboard.jsx
================
import React, { useState } from "react";

const ApiTestDashboard = ({ user }) => {
  // Configuration state
  const [apiBaseUrl, setApiBaseUrl] = useState("https://earthwalletapi.onrender.com");
  const [testEmail, setTestEmail] = useState(user?.email || " ");
  const [debugInfo, setDebugInfo] = useState("");
  
  // Data state
  const [wallet, setWallet] = useState(null);
  const [transactions, setTransactions] = useState([]);
  const [withdrawals, setWithdrawals] = useState([]);
  const [userKioskId, setUserKioskId] = useState(null);

  // Loading states
  const [loading, setLoading] = useState({});
  const [errors, setErrors] = useState({});

  // Form states
  const [depositForm, setDepositForm] = useState({
    material: "plastic",
    units: 1,
  });
  const [kioskDepositForm, setKioskDepositForm] = useState({
    kioskId: "",
    material: "plastic",
    units: 1,
  });
  const [withdrawForm, setWithdrawForm] = useState({
    amount: "",
    bankToken: "tok_test_123",
  });
  const [transactionLimit, setTransactionLimit] = useState(10);
  const [withdrawalLimit, setWithdrawalLimit] = useState(10);

  // Helper function to make API calls
  const apiCall = async (endpoint, options = {}) => {
    const url = `${apiBaseUrl}${endpoint}`;

    let authHeaders = {
      "Content-Type": "application/json",
    };

    let debugMessage = `Making request to ${endpoint}\n`;

    if (user) {
      try {
        const idToken = await user.getIdToken();
        authHeaders["Authorization"] = `Bearer ${idToken}`;
        debugMessage += `Using Firebase token for user: ${user.email}\n`;
        debugMessage += `Token preview: ${idToken.substring(0, 50)}...\n`;
      } catch (error) {
        console.error("Failed to get ID token:", error);
        debugMessage += `Failed to get Firebase token: ${error.message}\n`;

        // Fall back to test header
        if (testEmail) {
          authHeaders["X-Test-User-Email"] = testEmail;
          debugMessage += `Falling back to test email: ${testEmail}\n`;
        }
      }
    } else if (testEmail) {
      authHeaders["X-Test-User-Email"] = testEmail;
      debugMessage += `Using test email: ${testEmail}\n`;
    } else {
      debugMessage += `No authentication method available\n`;
    }

    setDebugInfo(debugMessage);
    console.log("Auth Debug:", debugMessage);
    console.log("Request headers:", authHeaders);

    const defaultOptions = {
      headers: authHeaders,
    };

    const response = await fetch(url, { ...defaultOptions, ...options });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("API Error Response:", errorText);
      throw new Error(`API Error ${response.status}: ${errorText}`);
    }

    return response.json();
  };

  // Helper function for kiosk API calls
  const kioskApiCall = async (endpoint, kioskId, options = {}) => {
    const url = `${apiBaseUrl}${endpoint}`;

    const headers = {
      "Content-Type": "application/json",
      "X-Kiosk-User-ID": kioskId,
    };

    const defaultOptions = {
      headers,
    };

    const response = await fetch(url, { ...defaultOptions, ...options });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Kiosk API Error Response:", errorText);
      throw new Error(`Kiosk API Error ${response.status}: ${errorText}`);
    }

    return response.json();
  };

  // Generic handler for API calls
  const handleApiCall = async (key, apiCallFn, successCallback) => {
    setLoading((prev) => ({ ...prev, [key]: true }));
    setErrors((prev) => ({ ...prev, [key]: null }));

    try {
      const result = await apiCallFn();
      console.log(`${key} result:`, result);
      if (successCallback) successCallback(result);
    } catch (error) {
      console.error(`${key} error:`, error);
      setErrors((prev) => ({ ...prev, [key]: error.message }));
    } finally {
      setLoading((prev) => ({ ...prev, [key]: false }));
    }
  };

  // API handlers
  const handleGetWallet = () => {
    handleApiCall(
      "wallet",
      () => apiCall("/wallet"),
      (result) => {
        setWallet(result);
        setWallet((prev) => ({
          ...prev,
          lastUpdated: new Date().toLocaleString(),
        }));
      }
    );
  };

  const handleGetKioskId = () => {
    handleApiCall(
      "kioskId",
      () => apiCall("/user/kiosk-id"),
      (result) => {
        setUserKioskId(result.kiosk_id);
        setKioskDepositForm(prev => ({ ...prev, kioskId: result.kiosk_id }));
      }
    );
  };

  const handleCreateDeposit = () => {
    handleApiCall(
      "deposit",
      () =>
        apiCall("/deposit", {
          method: "POST",
          body: JSON.stringify({
            material: depositForm.material,
            units: parseInt(depositForm.units),
          }),
        }),
      (result) => {
        // Refresh wallet after successful deposit
        handleGetWallet();
      }
    );
  };

  const handleCreateKioskDeposit = () => {
    if (!kioskDepositForm.kioskId) {
      setErrors(prev => ({ ...prev, kioskDeposit: "Kiosk ID is required" }));
      return;
    }

    handleApiCall(
      "kioskDeposit",
      () =>
        kioskApiCall("/deposit", kioskDepositForm.kioskId, {
          method: "POST",
          body: JSON.stringify({
            material: kioskDepositForm.material,
            units: parseInt(kioskDepositForm.units),
          }),
        }),
      (result) => {
        // Refresh wallet after successful deposit
        handleGetWallet();
      }
    );
  };

  const handleGetTransactions = () => {
    handleApiCall(
      "transactions",
      () => apiCall(`/transactions?limit=${transactionLimit}`),
      (result) => setTransactions(result.transactions || result)
    );
  };

  const handleCreateWithdrawal = () => {
    const amountCents = Math.round(parseFloat(withdrawForm.amount) * 100);
    handleApiCall(
      "withdrawal",
      () =>
        apiCall("/withdraw", {
          method: "POST",
          body: JSON.stringify({
            amount_cents: amountCents,
            bank_token: withdrawForm.bankToken,
          }),
        }),
      (result) => {
        // Refresh wallet after successful withdrawal
        handleGetWallet();
      }
    );
  };

  const handleGetWithdrawals = () => {
    handleApiCall(
      "withdrawals",
      () => apiCall(`/withdrawals?limit=${withdrawalLimit}`),
      (result) => setWithdrawals(result.withdrawals || result)
    );
  };

  // Helper functions
  const formatMoney = (cents) => `$${(cents / 100).toFixed(2)}`;
  const calculateExpectedEarnings = (form) => {
    const rate = form.material === "plastic" ? 5 : 10;
    const totalCents = form.units * rate;
    return { cents: totalCents, dollars: formatMoney(totalCents) };
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString();
  };

  // Connection status
  const connectionStatus =
    apiBaseUrl && testEmail ? "connected" : "disconnected";

  return (
    <div className="min-h-screen bg-gray-50 p-6 w-full">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">
          Flask API Test Dashboard
        </h1>
        
        {debugInfo && (
          <div className="bg-yellow-50 rounded-lg shadow p-6 border mb-6 text-black">
            <h2 className="text-xl font-semibold mb-4">Debug Information</h2>
            <pre className="text-sm bg-white p-3 rounded border overflow-x-auto">
              {debugInfo}
            </pre>
            {user && (
              <div className="mt-4 text-sm">
                <p>
                  <strong>Authenticated User:</strong> {user.email}
                </p>
                <p>
                  <strong>User UID:</strong> {user.uid}
                </p>
                <button
                  onClick={async () => {
                    try {
                      const token = await user.getIdToken();
                      console.log("Full Firebase Token:", token);
                      alert("Token logged to console");
                    } catch (error) {
                      console.error("Token error:", error);
                    }
                  }}
                  className="bg-yellow-500 text-white px-3 py-1 rounded text-xs mt-2"
                >
                  Log Full Token to Console
                </button>
              </div>
            )}
          </div>
        )}

        {/* API Configuration Section */}
        <div className="bg-white rounded-lg shadow p-6 border mb-6">
          <h2 className="text-xl font-semibold mb-4">API Configuration</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                API Base URL
              </label>
              <input
                type="text"
                value={apiBaseUrl}
                onChange={(e) => setApiBaseUrl(e.target.value)}
                className="border rounded px-3 py-2 w-full"
                placeholder="https://earthwalletapi.onrender.com"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Test Email
              </label>
              <input
                type="email"
                value={testEmail}
                onChange={(e) => setTestEmail(e.target.value)}
                className="border rounded px-3 py-2 w-full"
                placeholder="test@example.com"
              />
            </div>
          </div>
          <div className="mt-4 flex items-center">
            <span className="text-sm text-gray-600 mr-2">
              Connection Status:
            </span>
            <span
              className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                connectionStatus === "connected"
                  ? "bg-green-100 text-green-800"
                  : "bg-red-100 text-red-800"
              }`}
            >
              <span
                className={`w-2 h-2 rounded-full mr-1 ${
                  connectionStatus === "connected"
                    ? "bg-green-400"
                    : "bg-red-400"
                }`}
              ></span>
              {connectionStatus}
            </span>
          </div>
        </div>

        {/* Wallet Balance & Kiosk ID Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          <div className="bg-white rounded-lg shadow p-6 border">
            <h2 className="text-xl font-semibold mb-4">Wallet Balance</h2>
            <button
              onClick={handleGetWallet}
              disabled={loading.wallet}
              className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded disabled:bg-gray-400 mb-4"
            >
              {loading.wallet ? (
                <span className="flex items-center">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Loading...
                </span>
              ) : (
                "Get Wallet"
              )}
            </button>

            {errors.wallet && (
              <div className="bg-red-100 border-red-500 text-red-700 p-3 rounded mb-4">
                {errors.wallet}
              </div>
            )}

            {wallet && (
              <div className="bg-gray-50 p-4 rounded">
                <p className="text-2xl font-bold text-green-600">
                  {formatMoney(wallet.balance_cents)}
                </p>
                <p className="text-sm text-gray-600">
                  Balance: {wallet.balance_cents} cents
                </p>
                {wallet.lastUpdated && (
                  <p className="text-xs text-gray-500 mt-2">
                    Last updated: {wallet.lastUpdated}
                  </p>
                )}
              </div>
            )}
          </div>

          {/* Kiosk ID Section */}
          <div className="bg-white rounded-lg shadow p-6 border">
            <h2 className="text-xl font-semibold mb-4">User Kiosk ID</h2>
            <button
              onClick={handleGetKioskId}
              disabled={loading.kioskId}
              className="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded disabled:bg-gray-400 mb-4"
            >
              {loading.kioskId ? (
                <span className="flex items-center">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Loading...
                </span>
              ) : (
                "Get Kiosk ID"
              )}
            </button>

            {errors.kioskId && (
              <div className="bg-red-100 border-red-500 text-red-700 p-3 rounded mb-4">
                {errors.kioskId}
              </div>
            )}

            {userKioskId && (
              <div className="bg-purple-50 p-4 rounded">
                <p className="text-sm text-gray-600 mb-2">Your Kiosk ID:</p>
                <p className="text-2xl font-bold text-purple-600 font-mono">
                  {userKioskId}
                </p>
                <p className="text-xs text-gray-500 mt-2">
                  Use this ID at kiosks for deposits
                </p>
              </div>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Regular Deposit Testing Section */}
          <div className="bg-white rounded-lg shadow p-6 border">
            <h2 className="text-xl font-semibold mb-4">Create Deposit (Firebase Auth)</h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Material
                </label>
                <select
                  value={depositForm.material}
                  onChange={(e) =>
                    setDepositForm((prev) => ({
                      ...prev,
                      material: e.target.value,
                    }))
                  }
                  className="border rounded px-3 py-2 w-full"
                >
                  <option value="plastic">Plastic (5¢ per unit)</option>
                  <option value="aluminum">Aluminum (10¢ per unit)</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Units
                </label>
                <input
                  type="number"
                  min="1"
                  value={depositForm.units}
                  onChange={(e) =>
                    setDepositForm((prev) => ({
                      ...prev,
                      units: e.target.value,
                    }))
                  }
                  className="border rounded px-3 py-2 w-full"
                />
              </div>

              <div className="bg-green-50 p-3 rounded">
                <p className="text-sm text-green-700">
                  Expected earnings: {calculateExpectedEarnings(depositForm).dollars} (
                  {calculateExpectedEarnings(depositForm).cents} cents)
                </p>
              </div>

              <button
                onClick={handleCreateDeposit}
                disabled={loading.deposit}
                className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded disabled:bg-gray-400 w-full"
              >
                {loading.deposit ? (
                  <span className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Creating...
                  </span>
                ) : (
                  "Create Deposit"
                )}
              </button>

              {errors.deposit && (
                <div className="bg-red-100 border-red-500 text-red-700 p-3 rounded">
                  {errors.deposit}
                </div>
              )}
            </div>
          </div>

          {/* Kiosk Deposit Testing Section */}
          <div className="bg-white rounded-lg shadow p-6 border">
            <h2 className="text-xl font-semibold mb-4">Create Kiosk Deposit</h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Kiosk ID
                </label>
                <input
                  type="text"
                  value={kioskDepositForm.kioskId}
                  onChange={(e) =>
                    setKioskDepositForm((prev) => ({
                      ...prev,
                      kioskId: e.target.value.toUpperCase(),
                    }))
                  }
                  className="border rounded px-3 py-2 w-full font-mono"
                  placeholder="Enter 8-character Kiosk ID"
                  maxLength={8}
                />
                <p className="text-xs text-gray-500 mt-1">
                  Use your kiosk ID or any valid user's kiosk ID
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Material
                </label>
                <select
                  value={kioskDepositForm.material}
                  onChange={(e) =>
                    setKioskDepositForm((prev) => ({
                      ...prev,
                      material: e.target.value,
                    }))
                  }
                  className="border rounded px-3 py-2 w-full"
                >
                  <option value="plastic">Plastic (5¢ per unit)</option>
                  <option value="aluminum">Aluminum (10¢ per unit)</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Units
                </label>
                <input
                  type="number"
                  min="1"
                  value={kioskDepositForm.units}
                  onChange={(e) =>
                    setKioskDepositForm((prev) => ({
                      ...prev,
                      units: e.target.value,
                    }))
                  }
                  className="border rounded px-3 py-2 w-full"
                />
              </div>

              <div className="bg-blue-50 p-3 rounded">
                <p className="text-sm text-blue-700">
                  Expected earnings: {calculateExpectedEarnings(kioskDepositForm).dollars} (
                  {calculateExpectedEarnings(kioskDepositForm).cents} cents)
                </p>
              </div>

              <button
                onClick={handleCreateKioskDeposit}
                disabled={loading.kioskDeposit || !kioskDepositForm.kioskId}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded disabled:bg-gray-400 w-full"
              >
                {loading.kioskDeposit ? (
                  <span className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Creating...
                  </span>
                ) : (
                  "Create Kiosk Deposit"
                )}
              </button>

              {errors.kioskDeposit && (
                <div className="bg-red-100 border-red-500 text-red-700 p-3 rounded">
                  {errors.kioskDeposit}
                </div>
              )}
            </div>
          </div>

          {/* Transaction History Section */}
          <div className="bg-white rounded-lg shadow p-6 border">
            <h2 className="text-xl font-semibold mb-4">Transaction History</h2>
            <div className="flex gap-4 mb-4">
              <input
                type="number"
                min="1"
                max="100"
                value={transactionLimit}
                onChange={(e) => setTransactionLimit(e.target.value)}
                className="border rounded px-3 py-2 w-20"
                placeholder="10"
              />
              <button
                onClick={handleGetTransactions}
                disabled={loading.transactions}
                className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded disabled:bg-gray-400"
              >
                {loading.transactions ? (
                  <span className="flex items-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Loading...
                  </span>
                ) : (
                  "Get Transactions"
                )}
              </button>
            </div>

            {errors.transactions && (
              <div className="bg-red-100 border-red-500 text-red-700 p-3 rounded mb-4">
                {errors.transactions}
              </div>
            )}

            {transactions.length > 0 && (
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Date
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Type
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Material
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Units
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Amount
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {transactions.map((transaction, index) => (
                      <tr key={index}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {formatDate(transaction.created_at)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {transaction.transaction_type || "deposit"}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {transaction.material || "-"}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {transaction.units || "-"}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {formatMoney(transaction.amount_cents)}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </div>

          {/* Withdrawal Testing Section */}
          <div className="bg-white rounded-lg shadow p-6 border">
            <h2 className="text-xl font-semibold mb-4">Create Withdrawal</h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Amount (USD)
                </label>
                <input
                  type="number"
                  step="0.01"
                  min="0"
                  value={withdrawForm.amount}
                  onChange={(e) =>
                    setWithdrawForm((prev) => ({
                      ...prev,
                      amount: e.target.value,
                    }))
                  }
                  className="border rounded px-3 py-2 w-full"
                  placeholder="10.00"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Bank Token
                </label>
                <input
                  type="text"
                  value={withdrawForm.bankToken}
                  onChange={(e) =>
                    setWithdrawForm((prev) => ({
                      ...prev,
                      bankToken: e.target.value,
                    }))
                  }
                  className="border rounded px-3 py-2 w-full"
                  placeholder="tok_test_123"
                />
              </div>

              {withdrawForm.amount && (
                <div className="bg-blue-50 p-3 rounded">
                  <p className="text-sm text-blue-700">
                    Amount in cents:{" "}
                    {Math.round(parseFloat(withdrawForm.amount) * 100)}
                  </p>
                </div>
              )}

              <button
                onClick={handleCreateWithdrawal}
                disabled={loading.withdrawal || !withdrawForm.amount}
                className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded disabled:bg-gray-400 w-full"
              >
                {loading.withdrawal ? (
                  <span className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    Processing...
                  </span>
                ) : (
                  "Create Withdrawal"
                )}
              </button>

              {errors.withdrawal && (
                <div className="bg-red-100 border-red-500 text-red-700 p-3 rounded">
                  {errors.withdrawal}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Withdrawal History Section */}
        <div className="bg-white rounded-lg shadow p-6 border mt-6">
          <h2 className="text-xl font-semibold mb-4">Withdrawal History</h2>
          <div className="flex gap-4 mb-4">
            <input
              type="number"
              min="1"
              max="100"
              value={withdrawalLimit}
              onChange={(e) => setWithdrawalLimit(e.target.value)}
              className="border rounded px-3 py-2 w-20"
              placeholder="10"
            />
            <button
              onClick={handleGetWithdrawals}
              disabled={loading.withdrawals}
              className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded disabled:bg-gray-400"
            >
              {loading.withdrawals ? (
                <span className="flex items-center">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Loading...
                </span>
              ) : (
                "Get Withdrawals"
              )}
            </button>
          </div>

          {errors.withdrawals && (
            <div className="bg-red-100 border-red-500 text-red-700 p-3 rounded mb-4">
              {errors.withdrawals}
            </div>
          )}

          {withdrawals.length > 0 && (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Date
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Amount
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Status
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Bank Token
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {withdrawals.map((withdrawal, index) => (
                    <tr key={index}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {formatDate(withdrawal.created_at)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {formatMoney(withdrawal.amount_cents)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span
                          className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                            withdrawal.status === "completed"
                              ? "bg-green-100 text-green-800"
                              : withdrawal.status === "pending"
                              ? "bg-yellow-100 text-yellow-800"
                              : "bg-red-100 text-red-800"
                          }`}
                        >
                          {withdrawal.status}
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {withdrawal.bank_token}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ApiTestDashboard;

================
File: src/pages/EarthWalletProjectPage.jsx
================
import React from 'react';

const EarthWalletProjectPage = () => {
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Banner Section */}
      <section className="bg-gradient-to-br from-green-600 via-green-700 to-blue-800 text-white">
        <div className="max-w-6xl mx-auto px-6 py-20">
          <div className="text-center">
            <h1 className="text-5xl md:text-6xl font-bold mb-6">
              🌍 EarthWallet
            </h1>
            <p className="text-xl md:text-2xl font-light mb-8 max-w-4xl mx-auto leading-relaxed">
              Revolutionary recycling rewards platform that turns your environmental impact into instant cash rewards
            </p>
            <div className="flex flex-col md:flex-row gap-4 justify-center items-center">
              <div className="bg-white bg-opacity-20 backdrop-blur rounded-lg px-6 py-3">
                <span className="text-lg font-semibold">♻️ Recycle • 💰 Earn • 🌱 Repeat</span>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Demo Video Section */}
      <section className="py-16 bg-white">
        <div className="max-w-6xl mx-auto px-6">
          <div className="text-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              See EarthWallet in Action
            </h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              Watch how our innovative platform makes recycling rewarding and accessible to everyone
            </p>
          </div>
          
          {/* Video Placeholder */}
          <div className="max-w-4xl mx-auto">
            <div className="relative aspect-video bg-gray-900 rounded-2xl shadow-2xl overflow-hidden">
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="text-center text-white">
                  <div className="w-20 h-20 bg-red-600 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg className="w-8 h-8 ml-1" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                  </div>
                  <p className="text-lg font-medium">Demo Video Coming Soon</p>
                  <p className="text-gray-300">Experience the future of recycling</p>
                </div>
              </div>
              {/* YouTube embed placeholder */}
              {/* <iframe 
                className="w-full h-full" 
                src="https://www.youtube.com/embed/YOUR_VIDEO_ID" 
                title="EarthWallet Demo"
                frameBorder="0" 
                allowFullScreen
              ></iframe> */}
            </div>
          </div>
        </div>
      </section>

      {/* Kiosk Desktop App Section */}
      <section className="py-16 bg-gray-100">
        <div className="max-w-6xl mx-auto px-6">
          <div className="grid md:grid-cols-2 gap-12 items-center">
            <div>
              <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-6">
                🖥️ Smart Kiosk Desktop App
              </h2>
              <div className="space-y-4 text-lg text-gray-700">
                <p>
                  Our cutting-edge kiosk application, built with <strong>React.js</strong> and packaged using <strong>Electron</strong>, 
                  transforms any computer into a powerful recycling station.
                </p>
                <div className="bg-white p-6 rounded-lg shadow-sm border-l-4 border-green-500">
                  <h3 className="font-semibold text-gray-900 mb-2">🔑 Kiosk ID Login</h3>
                  <p>Users simply enter their unique 8-character Kiosk ID from their EarthWallet to get started</p>
                </div>
                <div className="bg-white p-6 rounded-lg shadow-sm border-l-4 border-blue-500">
                  <h3 className="font-semibold text-gray-900 mb-2">💰 Instant Payments</h3>
                  <p>Deposit bottles and cans to receive immediate payments directly to your digital wallet</p>
                </div>
                <div className="bg-white p-6 rounded-lg shadow-sm border-l-4 border-purple-500">
                  <h3 className="font-semibold text-gray-900 mb-2">🚀 Future Technology</h3>
                  <p>Currently simulated with spacebar input, we're developing integration with smart hardware featuring:</p>
                  <ul className="list-disc list-inside mt-2 space-y-1 text-gray-600">
                    <li>Precision weight mechanisms</li>
                    <li>AI-powered image recognition for real-time bottle classification</li>
                    <li>Barcode scanning for material identification</li>
                    <li>Custom device integration with dedicated counting software</li>
                  </ul>
                </div>
              </div>
            </div>
            <div className="bg-gradient-to-br from-green-500 to-blue-600 p-8 rounded-2xl text-white">
              <div className="text-center">
                <div className="text-6xl mb-4">🏪</div>
                <h3 className="text-2xl font-bold mb-4">Kiosk Features</h3>
                <div className="space-y-3 text-left">
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">🎯</span>
                    <span>Touch-optimized interface</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">⚡</span>
                    <span>Real-time transaction processing</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">🔒</span>
                    <span>Secure kiosk ID authentication</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">📊</span>
                    <span>Live balance updates</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Wallet App Section */}
      <section className="py-16 bg-white">
        <div className="max-w-6xl mx-auto px-6">
          <div className="grid md:grid-cols-2 gap-12 items-center">
            <div className="bg-gradient-to-br from-blue-500 to-green-600 p-8 rounded-2xl text-white">
              <div className="text-center">
                <div className="text-6xl mb-4">📱</div>
                <h3 className="text-2xl font-bold mb-4">Mobile Wallet</h3>
                <div className="space-y-3 text-left">
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">💳</span>
                    <span>Instant withdrawals to bank account</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">📈</span>
                    <span>Real-time transaction history</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">🔐</span>
                    <span>Firebase authentication</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <span className="text-2xl">🌐</span>
                    <span>Cross-platform compatibility</span>
                  </div>
                </div>
              </div>
            </div>
            <div>
              <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-6">
                📲 Digital Wallet App
              </h2>
              <div className="space-y-4 text-lg text-gray-700">
                <p>
                  Built with <strong>React.js</strong> and deployable to mobile devices using <strong>Capacitor</strong>, 
                  our wallet app puts financial control in users' hands.
                </p>
                <div className="bg-gray-50 p-6 rounded-lg border-l-4 border-green-500">
                  <h3 className="font-semibold text-gray-900 mb-2">💸 Seamless Withdrawals</h3>
                  <p>Powered by <strong>Stripe Payouts</strong>, users can transfer earnings directly to their bank accounts with just a few taps</p>
                </div>
                <div className="bg-gray-50 p-6 rounded-lg border-l-4 border-blue-500">
                  <h3 className="font-semibold text-gray-900 mb-2">📊 Transaction Transparency</h3>
                  <p>Complete visibility into all deposits and withdrawals with detailed transaction histories and real-time balance updates</p>
                </div>
                <div className="bg-gray-50 p-6 rounded-lg border-l-4 border-purple-500">
                  <h3 className="font-semibold text-gray-900 mb-2">🏦 Future Banking Integration</h3>
                  <p>Planned integration with <strong>Stripe Connect</strong> to allow users to link their own bank accounts through a secure portal</p>
                </div>
                <div className="bg-gray-50 p-6 rounded-lg border-l-4 border-orange-500">
                  <h3 className="font-semibold text-gray-900 mb-2">📱 Multi-Platform Deployment</h3>
                  <p>Single React.js codebase deployed to <strong>Android</strong> and <strong>iOS</strong> using Capacitor for native app experiences</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Backend Section */}
      <section className="py-16 bg-gray-100">
        <div className="max-w-6xl mx-auto px-6">
          <div className="text-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              ⚙️ Robust Backend Infrastructure
            </h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              Enterprise-grade API built with Flask, secured by Firebase, and powered by Stripe
            </p>
          </div>
          
          <div className="grid md:grid-cols-3 gap-8">
            <div className="bg-white p-6 rounded-xl shadow-lg border-t-4 border-red-500">
              <div className="text-3xl mb-4">🔐</div>
              <h3 className="text-xl font-bold text-gray-900 mb-3">Firebase Authentication</h3>
              <p className="text-gray-600 mb-4">Secure user authentication with Firebase ID tokens verified server-side for maximum security</p>
              <div className="text-sm text-gray-500">
                <span className="font-medium">Features:</span> Token validation, user management, session handling
              </div>
            </div>

            <div className="bg-white p-6 rounded-xl shadow-lg border-t-4 border-blue-500">
              <div className="text-3xl mb-4">💰</div>
              <h3 className="text-xl font-bold text-gray-900 mb-3">Wallet Management</h3>
              <p className="text-gray-600 mb-4">Complete wallet lifecycle management from user creation to balance tracking and transaction history</p>
              <div className="text-sm text-gray-500">
                <span className="font-medium">Endpoints:</span> /wallet, /transactions, user account management
              </div>
            </div>

            <div className="bg-white p-6 rounded-xl shadow-lg border-t-4 border-green-500">
              <div className="text-3xl mb-4">📦</div>
              <h3 className="text-xl font-bold text-gray-900 mb-3">Deposit Processing</h3>
              <p className="text-gray-600 mb-4">Smart deposit endpoint that calculates payouts based on material type and quantity with instant balance updates</p>
              <div className="text-sm text-gray-500">
                <span className="font-medium">Materials:</span> Plastic (5¢), Aluminum (10¢) per unit
              </div>
            </div>

            <div className="bg-white p-6 rounded-xl shadow-lg border-t-4 border-purple-500">
              <div className="text-3xl mb-4">💸</div>
              <h3 className="text-xl font-bold text-gray-900 mb-3">Stripe Withdrawals</h3>
              <p className="text-gray-600 mb-4">Seamless integration with Stripe Payouts for direct bank transfers, with automatic balance deduction and transaction logging</p>
              <div className="text-sm text-gray-500">
                <span className="font-medium">Process:</span> Balance verification → Stripe payout → Account update
              </div>
            </div>

            <div className="bg-white p-6 rounded-xl shadow-lg border-t-4 border-yellow-500">
              <div className="text-3xl mb-4">🏪</div>
              <h3 className="text-xl font-bold text-gray-900 mb-3">Kiosk Integration</h3>
              <p className="text-gray-600 mb-4">Specialized endpoints for kiosk operations with unique ID-based authentication for secure, app-free transactions</p>
              <div className="text-sm text-gray-500">
                <span className="font-medium">Features:</span> Kiosk ID validation, touch-optimized responses
              </div>
            </div>

            <div className="bg-white p-6 rounded-xl shadow-lg border-t-4 border-indigo-500">
              <div className="text-3xl mb-4">🛡️</div>
              <h3 className="text-xl font-bold text-gray-900 mb-3">Security & Reliability</h3>
              <p className="text-gray-600 mb-4">Production-ready with rate limiting, comprehensive error handling, and secure token management</p>
              <div className="text-sm text-gray-500">
                <span className="font-medium">Stack:</span> Flask, PostgreSQL, Redis, Railway deployment
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Future Features Section */}
      <section className="py-16 bg-white">
        <div className="max-w-6xl mx-auto px-6">
          <div className="text-center mb-12">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              🚀 Coming Soon
            </h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">
              Exciting features in development to enhance the EarthWallet ecosystem
            </p>
          </div>

          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            <div className="bg-gradient-to-br from-purple-500 to-pink-600 p-6 rounded-xl text-white">
              <div className="text-4xl mb-4">💳</div>
              <h3 className="text-xl font-bold mb-3">EarthWallet Debit Cards</h3>
              <p className="text-purple-100 mb-4">
                Instant access to your earnings with Stripe-powered debit cards for immediate spending
              </p>
              <div className="text-sm text-purple-200">
                Order physical cards directly from the app
              </div>
            </div>

            <div className="bg-gradient-to-br from-blue-500 to-cyan-600 p-6 rounded-xl text-white">
              <div className="text-4xl mb-4">🗺️</div>
              <h3 className="text-xl font-bold mb-3">Kiosk Location Map</h3>
              <p className="text-blue-100 mb-4">
                Interactive maps in both web and mobile apps to help users find the nearest recycling kiosks
              </p>
              <div className="text-sm text-blue-200">
                Real-time availability and directions
              </div>
            </div>

            <div className="bg-gradient-to-br from-green-500 to-teal-600 p-6 rounded-xl text-white">
              <div className="text-4xl mb-4">🏧</div>
              <h3 className="text-xl font-bold mb-3">Cash Withdrawal ATMs</h3>
              <p className="text-green-100 mb-4">
                React.js and Electron-powered ATM software for instant cash withdrawals from EarthWallet balances
              </p>
              <div className="text-sm text-green-200">
                Physical cash access to digital earnings
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Call to Action */}
      <section className="py-16 bg-gradient-to-r from-green-600 to-blue-600 text-white">
        <div className="max-w-4xl mx-auto px-6 text-center">
          <h2 className="text-3xl md:text-4xl font-bold mb-6">
            Join the Recycling Revolution
          </h2>
          <p className="text-xl mb-8 opacity-90">
            EarthWallet is transforming how we think about recycling, making environmental responsibility both rewarding and accessible
          </p>
          <div className="flex flex-col md:flex-row gap-4 justify-center">
            <button className="bg-white text-green-600 px-8 py-3 rounded-lg font-bold text-lg hover:bg-gray-100 transition-colors">
              Download App
            </button>
            <button className="border-2 border-white text-white px-8 py-3 rounded-lg font-bold text-lg hover:bg-white hover:text-green-600 transition-colors">
              Find Kiosks
            </button>
          </div>
        </div>
      </section>
    </div>
  );
};

export default EarthWalletProjectPage;

================
File: src/pages/index.js
================
import EarthWalletProjectPage from "./EarthWalletProjectPage";
import KioskDashboard from "./KioskDashboard";
import ApiTestDashboard from "./ApiTestDashboard";
import Wallet from "./Wallet";
import LandingPage from "./LandingPage";

export {
  EarthWalletProjectPage,
  KioskDashboard,
  ApiTestDashboard,
  Wallet,
  LandingPage,
};

================
File: src/pages/KioskDashboard.jsx
================
import React, { useState, useEffect } from 'react';

const KioskDashboard = () => {
  // State management
  const [currentScreen, setCurrentScreen] = useState('welcome'); // welcome, enterKioskId, selectMaterial, counting, result
  const [kioskId, setKioskId] = useState('');
  const [selectedMaterial, setSelectedMaterial] = useState('');
  const [itemCount, setItemCount] = useState(0);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState('');

  // API configuration
  const apiBaseUrl = "https://earthwalletapi.onrender.com";

  // Material rates
  const MATERIAL_RATES = { plastic: 5, aluminum: 10 };

  // On-screen keyboard layout
  const keyboardLayout = [
    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],
    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],
    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],
    ['Z', 'X', 'C', 'V', 'B', 'N', 'M']
  ];

  // Helper function for public API calls (no authentication)
  const publicApiCall = async (endpoint, options = {}) => {
    const url = `${apiBaseUrl}${endpoint}`;
    
    const headers = {
      "Content-Type": "application/json",
    };

    const defaultOptions = {
      headers,
    };

    const response = await fetch(url, { ...defaultOptions, ...options });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API Error ${response.status}: ${errorText}`);
    }

    return response.json();
  };

  // Helper function for kiosk API calls
  const kioskApiCall = async (endpoint, kioskId, options = {}) => {
    const url = `${apiBaseUrl}${endpoint}`;
    
    const headers = {
      "Content-Type": "application/json",
      "X-Kiosk-User-ID": kioskId,
    };

    const defaultOptions = {
      headers,
    };

    const response = await fetch(url, { ...defaultOptions, ...options });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API Error ${response.status}: ${errorText}`);
    }

    return response.json();
  };

  // Handle virtual keyboard input
  const handleKeyPress = (key) => {
    if (key === 'BACKSPACE') {
      setKioskId(prev => prev.slice(0, -1));
    } else if (key === 'CLEAR') {
      setKioskId('');
    } else if (kioskId.length < 8) {
      setKioskId(prev => prev + key);
    }
    setError(''); // Clear error when typing
  };

  // Listen for spacebar when counting
  useEffect(() => {
    const handleKeyDown = (event) => {
      if (currentScreen === 'counting' && event.code === 'Space') {
        event.preventDefault();
        setItemCount(prev => {
          const newCount = prev + 1;
          console.log(`Item detected! Total count: ${newCount}`);
          return newCount;
        });
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [currentScreen]);

  // Reset all state
  const resetKiosk = () => {
    setCurrentScreen('welcome');
    setKioskId('');
    setSelectedMaterial('');
    setItemCount(0);
    setIsSubmitting(false);
    setResult(null);
    setError('');
  };

  // Handle kiosk ID input
  const handleKioskIdSubmit = async () => {
    if (kioskId.length !== 8) {
      setError('Kiosk ID must be exactly 8 characters');
      return;
    }

    setIsSubmitting(true);
    setError('');

    try {
      // Validate kiosk ID using public validation endpoint
      const response = await publicApiCall("/validate-kiosk-id", {
        method: "POST",
        body: JSON.stringify({
          kiosk_id: kioskId
        }),
      });
      
      console.log(`Kiosk ID validated for user: ${response.user_email}`);
      
      // If successful, proceed to material selection
      setCurrentScreen('selectMaterial');
      setIsSubmitting(false);
    } catch (error) {
      // If kiosk ID is invalid, show error
      console.error('Kiosk ID validation failed:', error);
      setError('Invalid Kiosk ID. Please check your ID and try again.');
      setIsSubmitting(false);
    }
  };

  // Handle material selection
  const handleMaterialSelect = (material) => {
    setSelectedMaterial(material);
    setCurrentScreen('counting');
    setItemCount(0);
  };

  // Submit deposit
  const handleSubmitDeposit = async () => {
    if (itemCount === 0) {
      setError('Please add at least one item before submitting');
      return;
    }

    setIsSubmitting(true);
    setError('');

    try {
      const response = await kioskApiCall("/deposit", kioskId, {
        method: "POST",
        body: JSON.stringify({
          material: selectedMaterial,
          units: itemCount,
        }),
      });

      setResult({
        success: true,
        message: response.message || 'Deposit successful!',
        amount: response.transaction.amount_cents,
        newBalance: response.new_balance_cents,
      });
      setCurrentScreen('result');
    } catch (error) {
      setResult({
        success: false,
        message: error.message || 'Deposit failed. Please try again.',
      });
      setCurrentScreen('result');
    } finally {
      setIsSubmitting(false);
    }
  };

  // Calculate expected earnings
  const calculateEarnings = () => {
    const rate = MATERIAL_RATES[selectedMaterial] || 0;
    const totalCents = itemCount * rate;
    return {
      cents: totalCents,
      dollars: (totalCents / 100).toFixed(2),
    };
  };

  // Virtual Keyboard Component
  const VirtualKeyboard = () => (
    <div className="bg-gray-100 rounded-xl p-4 mt-4">
      <div className="space-y-2">
        {keyboardLayout.map((row, rowIndex) => (
          <div key={rowIndex} className="flex justify-center space-x-1">
            {row.map((key) => (
              <button
                key={key}
                onClick={() => handleKeyPress(key)}
                className="bg-white hover:bg-gray-200 active:bg-gray-300 border-2 border-gray-300 rounded-lg w-12 h-12 text-lg font-bold shadow-lg transform active:scale-95 transition-all duration-100"
              >
                {key}
              </button>
            ))}
          </div>
        ))}
        
        {/* Special keys row */}
        <div className="flex justify-center space-x-1 mt-3">
          <button
            onClick={() => handleKeyPress('CLEAR')}
            className="bg-red-500 hover:bg-red-600 active:bg-red-700 text-white border-2 border-red-600 rounded-lg px-4 h-12 text-sm font-bold shadow-lg transform active:scale-95 transition-all duration-100"
          >
            CLEAR
          </button>
          <button
            onClick={() => handleKeyPress('BACKSPACE')}
            className="bg-yellow-500 hover:bg-yellow-600 active:bg-yellow-700 text-white border-2 border-yellow-600 rounded-lg px-4 h-12 text-lg font-bold shadow-lg transform active:scale-95 transition-all duration-100"
          >
            ⌫
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <div className="h-screen bg-gradient-to-br from-green-400 to-blue-600 flex items-center justify-center p-2 text-black">
      <div className="bg-white rounded-2xl shadow-2xl w-full max-w-6xl h-[95vh] flex flex-col overflow-hidden">
        
        {/* Header */}
        <div className="bg-green-600 text-white p-4 rounded-t-2xl text-center flex-shrink-0">
          <h1 className="text-3xl font-bold">EarthWallet Kiosk</h1>
          <p className="text-green-100 mt-1 text-lg">Recycle • Earn • Repeat</p>
        </div>

        {/* Main Content */}
        <div className="flex-1 p-6 flex flex-col justify-center overflow-y-auto">
          
          {/* Welcome Screen */}
          {currentScreen === 'welcome' && (
            <div className="text-center space-y-6">
              <div className="text-6xl mb-4">♻️</div>
              <h2 className="text-4xl font-bold text-gray-800 mb-4">
                Welcome to EarthWallet Kiosk
              </h2>
              <p className="text-xl text-gray-600 mb-8">
                Turn your recyclables into cash instantly!
              </p>
              <button
                onClick={() => setCurrentScreen('enterKioskId')}
                className="bg-green-600 hover:bg-green-700 active:bg-green-800 text-white text-2xl font-bold py-4 px-12 rounded-2xl shadow-xl transform hover:scale-105 active:scale-95 transition-all duration-200"
              >
                START RECYCLING
              </button>
            </div>
          )}

          {/* Enter Kiosk ID Screen */}
          {currentScreen === 'enterKioskId' && (
            <div className="text-center space-y-4">
              <h2 className="text-3xl font-bold text-gray-800 mb-4">
                Enter Your Kiosk ID
              </h2>
              <p className="text-lg text-gray-600 mb-4">
                Your 8-character Kiosk ID can be found in your EarthWallet account
              </p>
              
              <div className="space-y-4">
                {/* Kiosk ID Display */}
                <div className="bg-gray-50 border-4 border-gray-300 rounded-xl py-4 px-8 mx-auto w-fit">
                  <div className="text-3xl font-mono font-bold text-center text-gray-800 min-w-[300px] tracking-wider">
                    {kioskId.padEnd(8, '_')}
                  </div>
                  <div className="text-sm text-gray-500 mt-1">
                    {kioskId.length}/8 characters
                  </div>
                </div>
                
                {error && (
                  <div className="text-red-600 text-lg font-bold bg-red-100 p-3 rounded-xl mx-auto max-w-md">
                    {error}
                  </div>
                )}
                
                {/* Virtual Keyboard */}
                <VirtualKeyboard />
                
                <div className="flex justify-center space-x-4 mt-4">
                  <button
                    onClick={() => setCurrentScreen('welcome')}
                    className="bg-gray-500 hover:bg-gray-600 active:bg-gray-700 text-white text-lg font-bold py-3 px-8 rounded-xl shadow-lg transform active:scale-95 transition-all duration-100"
                  >
                    Back
                  </button>
                  <button
                    onClick={handleKioskIdSubmit}
                    disabled={kioskId.length !== 8 || isSubmitting}
                    className="bg-green-600 hover:bg-green-700 active:bg-green-800 disabled:bg-gray-400 text-white text-lg font-bold py-3 px-8 rounded-xl shadow-lg transform active:scale-95 transition-all duration-100 disabled:transform-none disabled:active:scale-100"
                  >
                    {isSubmitting ? (
                      <span className="flex items-center">
                        <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                        Validating...
                      </span>
                    ) : (
                      'Continue'
                    )}
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Select Material Screen */}
          {currentScreen === 'selectMaterial' && (
            <div className="text-center space-y-6">
              <h2 className="text-3xl font-bold text-gray-800 mb-6">
                What are you recycling today?
              </h2>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto">
                <button
                  onClick={() => handleMaterialSelect('plastic')}
                  className="bg-blue-500 hover:bg-blue-600 active:bg-blue-700 text-white p-8 rounded-2xl shadow-2xl transform hover:scale-105 active:scale-95 transition-all duration-200 group"
                >
                  <div className="text-6xl mb-4 group-hover:animate-bounce">🍼</div>
                  <div className="text-2xl font-bold mb-3">Plastic Bottles</div>
                  <div className="text-lg bg-blue-400 bg-opacity-50 rounded-xl py-2 px-4">5¢ per bottle</div>
                </button>
                
                <button
                  onClick={() => handleMaterialSelect('aluminum')}
                  className="bg-gray-500 hover:bg-gray-600 active:bg-gray-700 text-white p-8 rounded-2xl shadow-2xl transform hover:scale-105 active:scale-95 transition-all duration-200 group"
                >
                  <div className="text-6xl mb-4 group-hover:animate-bounce">🥤</div>
                  <div className="text-2xl font-bold mb-3">Aluminum Cans</div>
                  <div className="text-lg bg-gray-400 bg-opacity-50 rounded-xl py-2 px-4">10¢ per can</div>
                </button>
              </div>
              
              <button
                onClick={() => setCurrentScreen('enterKioskId')}
                className="bg-gray-500 hover:bg-gray-600 active:bg-gray-700 text-white text-lg font-bold py-3 px-8 rounded-xl shadow-lg transform active:scale-95 transition-all duration-100 mt-6"
              >
                Back
              </button>
            </div>
          )}

          {/* Counting Screen */}
          {currentScreen === 'counting' && (
            <div className="text-center space-y-6">
              <h2 className="text-3xl font-bold text-gray-800 mb-4">
                Insert your {selectedMaterial === 'plastic' ? 'plastic bottles' : 'aluminum cans'}
              </h2>
              
              <div className="bg-gray-100 rounded-2xl p-8 mb-6">
                <div className="text-7xl font-bold text-green-600 mb-4">
                  {itemCount}
                </div>
                <div className="text-2xl text-gray-600 mb-4">
                  {selectedMaterial === 'plastic' ? 'Bottles' : 'Cans'} Detected
                </div>
                <div className="text-xl text-green-600 font-bold">
                  Current Value: ${calculateEarnings().dollars}
                </div>
              </div>
              
              <div className="bg-blue-50 border-4 border-blue-200 rounded-xl p-4 mb-6">
                <p className="text-lg text-blue-800">
                  <span className="font-bold">Instructions:</span> Insert items one by one into the machine.
                  <br />
                  <span className="text-sm mt-1 block">(Press SPACEBAR to simulate item detection)</span>
                </p>
              </div>
              
              <div className="flex justify-center space-x-4">
                <button
                  onClick={() => setCurrentScreen('selectMaterial')}
                  className="bg-gray-500 hover:bg-gray-600 active:bg-gray-700 text-white text-lg font-bold py-3 px-8 rounded-xl shadow-lg transform active:scale-95 transition-all duration-100"
                >
                  Back
                </button>
                <button
                  onClick={handleSubmitDeposit}
                  disabled={itemCount === 0 || isSubmitting}
                  className="bg-green-600 hover:bg-green-700 active:bg-green-800 disabled:bg-gray-400 text-white text-lg font-bold py-3 px-8 rounded-xl shadow-lg transform active:scale-95 transition-all duration-100 disabled:transform-none disabled:active:scale-100"
                >
                  {isSubmitting ? 'Processing...' : 'No More Items - Submit'}
                </button>
              </div>
            </div>
          )}

          {/* Result Screen */}
          {currentScreen === 'result' && (
            <div className="text-center space-y-6">
              <div className="text-7xl mb-4">
                {result?.success ? '🎉' : '❌'}
              </div>
              
              <h2 className={`text-3xl font-bold mb-4 ${
                result?.success ? 'text-green-600' : 'text-red-600'
              }`}>
                {result?.success ? 'Deposit Successful!' : 'Deposit Failed'}
              </h2>
              
              <div className="bg-gray-50 rounded-2xl p-6 mb-6">
                <p className="text-xl text-gray-800 mb-4">
                  {result?.message}
                </p>
                
                {result?.success && (
                  <div className="space-y-3">
                    <div className="text-3xl font-bold text-green-600">
                      Earned: ${(result.amount / 100).toFixed(2)}
                    </div>
                    <div className="text-xl text-gray-600">
                      Account Balance: ${(result.newBalance / 100).toFixed(2)}
                    </div>
                    <div className="text-lg text-gray-500">
                      {itemCount} {selectedMaterial === 'plastic' ? 'bottles' : 'cans'} recycled
                    </div>
                  </div>
                )}
              </div>
              
              <div className="flex justify-center space-x-4">
                <button
                  onClick={() => setCurrentScreen('selectMaterial')}
                  className="bg-blue-600 hover:bg-blue-700 active:bg-blue-800 text-white text-lg font-bold py-3 px-8 rounded-xl shadow-lg transform active:scale-95 transition-all duration-100"
                >
                  Deposit More
                </button>
                <button
                  onClick={resetKiosk}
                  className="bg-green-600 hover:bg-green-700 active:bg-green-800 text-white text-lg font-bold py-3 px-8 rounded-xl shadow-lg transform active:scale-95 transition-all duration-100"
                >
                  Finish
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="bg-gray-100 p-3 rounded-b-2xl text-center text-gray-600 flex-shrink-0">
          <p className="text-sm">EarthWallet • Making recycling rewarding</p>
          {currentScreen === 'counting' && (
            <p className="text-xs mt-1">Press SPACEBAR to simulate item detection</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default KioskDashboard;

================
File: src/pages/LandingPage.jsx
================
import { Link } from "react-router-dom";

const LandingPage = ({ openAuthModal, user }) => {
  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50  w-full">
      {/* Hero Section */}
 <section className="relative overflow-hidden w-full">
  <div className="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24">
    <div className="text-center">
      <h1 className="text-4xl md:text-6xl font-bold text-gray-900 mb-6">
        Turn Recycling Into
        <span className="text-green-600 block">Real Rewards</span>
      </h1>
      <p className="text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
        Deposit plastic and aluminum items, earn instant cash rewards, and
        help build a sustainable future. EarthWallet makes recycling
        profitable and effortless.
      </p>
      <div className="flex flex-col sm:flex-row gap-4 justify-center">
        {user ? (
          <Link
            to="/test"
            className="bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-lg text-lg font-semibold"
          >
            Open Dashboard
          </Link>
        ) : (
          <>
            <button
              onClick={() => openAuthModal("signup")}
              className="bg-green-600 hover:bg-green-700 text-white px-8 py-3 rounded-lg text-lg font-semibold"
            >
              Get Started Free
            </button>
            <button
              onClick={() => openAuthModal("login")}
              className="border-2 border-green-600 text-green-600 hover:bg-green-600 hover:text-white px-8 py-3 rounded-lg text-lg font-semibold"
            >
              Sign In
            </button>
          </>
        )}
      </div>
    </div>
  </div>

  {/* Decorative elements - behind content */}
  <div className="absolute top-0 right-0 -mt-4 -mr-4 w-72 h-72 bg-green-200 rounded-full opacity-20 animate-pulse z-0"></div>
  <div className="absolute bottom-0 left-0 -mb-4 -ml-4 w-96 h-96 bg-blue-200 rounded-full opacity-20 animate-pulse z-0"></div>
</section>

      {/* Features Section */}
      <section id="features" className="py-20 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              Why Choose EarthWallet?
            </h2>
            <p className="text-xl text-gray-600">
              Simple, rewarding, and environmentally conscious
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            <div className="text-center p-6">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-2xl">💰</span>
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                Instant Rewards
              </h3>
              <p className="text-gray-600">
                Earn 5¢ for plastic and 10¢ for aluminum items. Get paid
                immediately to your digital wallet.
              </p>
            </div>

            <div className="text-center p-6">
              <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-2xl">🌍</span>
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                Environmental Impact
              </h3>
              <p className="text-gray-600">
                Every item you recycle helps reduce waste and supports a
                circular economy.
              </p>
            </div>

            <div className="text-center p-6">
              <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-2xl">📱</span>
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                Easy to Use
              </h3>
              <p className="text-gray-600">
                Simple dashboard to track deposits, earnings, and withdraw your
                money anytime.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* How It Works Section */}
      <section id="how-it-works" className="py-20 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
              How It Works
            </h2>
            <p className="text-xl text-gray-600">
              Get started in three simple steps
            </p>
          </div>

          <div className="grid md:grid-cols-3 gap-8">
            <div className="text-center">
              <div className="w-12 h-12 bg-green-600 text-white rounded-full flex items-center justify-center mx-auto mb-4 text-xl font-bold">
                1
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                Sign Up
              </h3>
              <p className="text-gray-600">
                Create your free account in seconds with just your email
                address.
              </p>
            </div>

            <div className="text-center">
              <div className="w-12 h-12 bg-green-600 text-white rounded-full flex items-center justify-center mx-auto mb-4 text-xl font-bold">
                2
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                Deposit Items
              </h3>
              <p className="text-gray-600">
                Bring your plastic and aluminum items to any EarthWallet
                location.
              </p>
            </div>

            <div className="text-center">
              <div className="w-12 h-12 bg-green-600 text-white rounded-full flex items-center justify-center mx-auto mb-4 text-xl font-bold">
                3
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-2">
                Earn & Withdraw
              </h3>
              <p className="text-gray-600">
                Watch your balance grow and withdraw your earnings anytime.
              </p>
            </div>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-green-600">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl md:text-4xl font-bold text-white mb-4">
            Ready to Start Earning?
          </h2>
          <p className="text-xl text-green-100 mb-8">
            Join thousands of users already making money from recycling
          </p>
          {!user && (
            <button
              onClick={() => openAuthModal("signup")}
              className="bg-white text-green-600 hover:bg-gray-100 px-8 py-3 rounded-lg text-lg font-semibold"
            >
              Sign Up Now - It's Free
            </button>
          )}
        </div>
      </section>

      {/* Footer */}
      <footer id="contact" className="bg-gray-900 py-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid md:grid-cols-3 gap-8">
            <div>
              <h3 className="text-xl font-bold text-white mb-4">EarthWallet</h3>
              <p className="text-gray-400">
                Making recycling profitable and sustainable for everyone.
              </p>
            </div>
            <div>
              <h4 className="text-lg font-semibold text-white mb-4">
                Quick Links
              </h4>
              <ul className="space-y-2">
                <li>
                  <a
                    href="#features"
                    className="text-gray-400 hover:text-white"
                  >
                    Features
                  </a>
                </li>
                <li>
                  <a
                    href="#how-it-works"
                    className="text-gray-400 hover:text-white"
                  >
                    How It Works
                  </a>
                </li>
                <li>
                  <a href="#contact" className="text-gray-400 hover:text-white">
                    Contact
                  </a>
                </li>
              </ul>
            </div>
            <div>
              <h4 className="text-lg font-semibold text-white mb-4">Contact</h4>
              <p className="text-gray-400">support@recycletek.com</p>
              <p className="text-gray-400">1-800-RECYCLE</p>
            </div>
          </div>
          <div className="border-t border-gray-800 mt-8 pt-8 text-center">
            <p className="text-gray-400">
              &copy; 2025 EarthWallet. All rights reserved.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default LandingPage;

================
File: src/pages/Wallet.jsx
================
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";

const WalletPage = ({ user }) => {
  // State for wallet data
  const [wallet, setWallet] = useState(null);
  const [deposits, setDeposits] = useState([]);
  const [withdrawals, setWithdrawals] = useState([]);
  const [userKioskId, setUserKioskId] = useState(null);

  // UI state
  const [activeTab, setActiveTab] = useState("deposits");
  const [showWithdrawModal, setShowWithdrawModal] = useState(false);
  const [withdrawalAmount, setWithdrawalAmount] = useState("");
  const [withdrawAllSelected, setWithdrawAllSelected] = useState(false);
  const [showKioskId, setShowKioskId] = useState(false);

  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;

  // Loading and error states
  const [loading, setLoading] = useState({});
  const [errors, setErrors] = useState({});

  // API configuration
  const apiBaseUrl = "https://earthwalletapi.onrender.com"; // Adjust as needed
  const testEmail = user?.email || "";

  // Helper function to make API calls (same pattern as your test dashboard)
  const apiCall = async (endpoint, options = {}) => {
    const url = `${apiBaseUrl}${endpoint}`;

    let authHeaders = {
      "Content-Type": "application/json",
    };

    if (user) {
      try {
        const idToken = await user.getIdToken();
        authHeaders["Authorization"] = `Bearer ${idToken}`;
      } catch (error) {
        console.error("Failed to get ID token:", error);

        // Fall back to test header (same as your test dashboard)
        if (testEmail) {
          authHeaders["X-Test-User-Email"] = testEmail;
        }
      }
    } else if (testEmail) {
      authHeaders["X-Test-User-Email"] = testEmail;
    }

    const defaultOptions = {
      headers: authHeaders,
    };

    const response = await fetch(url, { ...defaultOptions, ...options });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API Error ${response.status}: ${errorText}`);
    }

    return response.json();
  };

  // Generic handler for API calls
  const handleApiCall = async (key, apiCallFn, successCallback) => {
    setLoading((prev) => ({ ...prev, [key]: true }));
    setErrors((prev) => ({ ...prev, [key]: null }));

    try {
      const result = await apiCallFn();
      if (successCallback) successCallback(result);
    } catch (error) {
      console.error(`${key} error:`, error);
      setErrors((prev) => ({ ...prev, [key]: error.message }));
    } finally {
      setLoading((prev) => ({ ...prev, [key]: false }));
    }
  };

  // Fetch wallet data
  const fetchWallet = () => {
    handleApiCall(
      "wallet",
      () => apiCall("/wallet"),
      (result) => setWallet(result)
    );
  };

  // Fetch deposits with pagination
  const fetchDeposits = (page = 1) => {
    const offset = (page - 1) * itemsPerPage;
    handleApiCall(
      "deposits",
      () => apiCall(`/transactions?limit=${itemsPerPage}&offset=${offset}`),
      (result) => setDeposits(result.transactions || result)
    );
  };

  // Fetch withdrawals with pagination
  const fetchWithdrawals = (page = 1) => {
    const offset = (page - 1) * itemsPerPage;
    handleApiCall(
      "withdrawals",
      () => apiCall(`/withdrawals?limit=${itemsPerPage}&offset=${offset}`),
      (result) => setWithdrawals(result.withdrawals || result)
    );
  };

  // Fetch user's kiosk ID
  const fetchKioskId = () => {
    if (!user) return; // skip when signed-out
    handleApiCall(
      "kioskId",
      () => apiCall("/user/kiosk-id"),
      (r) => setUserKioskId(r.kiosk_id)
    );
  };

  // Handle withdrawal submission
  const handleWithdrawal = () => {
    const amount = withdrawAllSelected
      ? wallet.balance_cents / 100
      : parseFloat(withdrawalAmount);
    const amountCents = Math.round(amount * 100);

    if (amountCents < 100) {
      setErrors((prev) => ({
        ...prev,
        withdrawal: "Minimum withdrawal is $1.00",
      }));
      return;
    }

    handleApiCall(
      "withdrawal",
      () =>
        apiCall("/withdraw", {
          method: "POST",
          body: JSON.stringify({
            amount_cents: amountCents,
            bank_token: "tok_test_123", // You might want to handle this differently
          }),
        }),
      (result) => {
        setShowWithdrawModal(false);
        setWithdrawalAmount("");
        setWithdrawAllSelected(false);
        setErrors((prev) => ({ ...prev, withdrawal: null }));
        fetchWallet();
        fetchWithdrawals(currentPage);
      }
    );
  };

  // Load initial data
  useEffect(() => {
    if (user === undefined) return;
    fetchWallet();
    fetchDeposits(1);
    fetchWithdrawals(1);
    fetchKioskId();
  }, [user]);

  // Handle tab change and pagination reset
  const handleTabChange = (tab) => {
    setActiveTab(tab);
    setCurrentPage(1);
    if (tab === "deposits") {
      fetchDeposits(1);
    } else {
      fetchWithdrawals(1);
    }
  };

  // Helper functions
  const formatMoney = (cents) => `$${(cents / 100).toFixed(2)}`;
  const formatDate = (dateString) => new Date(dateString).toLocaleDateString();

  // Get current data for active tab
  const currentData = activeTab === "deposits" ? deposits : withdrawals;
  const hasNextPage = currentData.length === itemsPerPage;
  const hasPrevPage = currentPage > 1;

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Wallet</h1>
          <p className="text-gray-600 mt-2">
            Manage your balance and view transaction history
          </p>
        </div>

        {/* Balance Section */}
        <div className="bg-white rounded-lg shadow-sm border p-8 mb-8">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between">
            <div className="mb-6 md:mb-0">
              <h2 className="text-lg font-medium text-gray-900 mb-2">
                Available Balance
              </h2>
              {wallet ? (
                <div className="text-4xl font-bold text-gray-900">
                  {formatMoney(wallet.balance_cents)}
                </div>
              ) : (
                <div className="animate-pulse bg-gray-200 h-12 w-32 rounded"></div>
              )}

              {/* Kiosk ID Section */}
              <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-blue-900">
                      Kiosk ID for deposits
                    </p>
                    <p className="text-xs text-blue-700">
                      Use this ID at any kiosk to add funds
                    </p>
                  </div>
                  <button
                    onClick={() => setShowKioskId(!showKioskId)}
                    className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                  >
                    {showKioskId ? "Hide" : "Show"} ID
                  </button>
                </div>
                {showKioskId && userKioskId && (
                  <div className="mt-2 p-2 bg-white border border-blue-200 rounded font-mono text-lg font-bold text-center text-blue-900">
                    {userKioskId}
                  </div>
                )}
              </div>
            </div>

            <div className="flex flex-col sm:flex-row gap-3">
              <button
                onClick={() => setShowWithdrawModal(true)}
                disabled={!wallet || wallet.balance_cents < 100}
                className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-6 py-3 rounded-lg font-medium transition-colors"
              >
                Withdraw Funds
              </button>

              <Link
                to="/debitcard"
                className="bg-gray-100 hover:bg-gray-200 text-gray-900 px-6 py-3 rounded-lg font-medium transition-colors text-center"
              >
                Apply for Debit Card
              </Link>
            </div>
          </div>
        </div>

        {/* Recent Activity Section */}
        <div className="bg-white rounded-lg shadow-sm border">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-xl font-semibold text-gray-900">
              Recent Activity
            </h2>
          </div>

          {/* Tabs */}
          <div className="border-b border-gray-200">
            <nav className="flex">
              <button
                onClick={() => handleTabChange("deposits")}
                className={`px-6 py-4 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === "deposits"
                    ? "border-blue-600 text-blue-600"
                    : "border-transparent text-gray-500 hover:text-gray-700"
                }`}
              >
                Deposits
              </button>
              <button
                onClick={() => handleTabChange("withdrawals")}
                className={`px-6 py-4 text-sm font-medium border-b-2 transition-colors ${
                  activeTab === "withdrawals"
                    ? "border-blue-600 text-blue-600"
                    : "border-transparent text-gray-500 hover:text-gray-700"
                }`}
              >
                Withdrawals
              </button>
            </nav>
          </div>

          {/* Table Content */}
          <div className="p-6">
            {loading[activeTab] ? (
              <div className="flex justify-center py-12">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              </div>
            ) : errors[activeTab] ? (
              <div className="text-center py-12 text-red-600">
                Error loading {activeTab}: {errors[activeTab]}
              </div>
            ) : currentData.length === 0 ? (
              <div className="text-center py-12 text-gray-500">
                No {activeTab} found
              </div>
            ) : (
              <>
                {/* Deposits Table */}
                {activeTab === "deposits" && (
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead>
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Date
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Material
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Units
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Amount
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {deposits.map((deposit, index) => (
                          <tr key={index} className="hover:bg-gray-50">
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {formatDate(deposit.created_at)}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 capitalize">
                              {deposit.material || "-"}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {deposit.units || "-"}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600">
                              +{formatMoney(deposit.amount_cents)}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}

                {/* Withdrawals Table */}
                {activeTab === "withdrawals" && (
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead>
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Date
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Amount
                          </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Status
                          </th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {withdrawals.map((withdrawal, index) => (
                          <tr key={index} className="hover:bg-gray-50">
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {formatDate(withdrawal.created_at)}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-red-600">
                              -{formatMoney(withdrawal.amount_cents)}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span
                                className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                                  withdrawal.status === "completed"
                                    ? "bg-green-100 text-green-800"
                                    : withdrawal.status === "pending"
                                    ? "bg-yellow-100 text-yellow-800"
                                    : "bg-red-100 text-red-800"
                                }`}
                              >
                                {withdrawal.status}
                              </span>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}

                {/* Pagination */}
                <div className="flex items-center justify-between mt-6">
                  <div className="text-sm text-gray-700">
                    Page {currentPage} of {activeTab} history
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => handlePageChange(currentPage - 1)}
                      disabled={!hasPrevPage}
                      className="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      Previous
                    </button>
                    <button
                      onClick={() => handlePageChange(currentPage + 1)}
                      disabled={!hasNextPage}
                      className="px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                      Next
                    </button>
                  </div>
                </div>
              </>
            )}
          </div>
        </div>
      </div>

      {/* Withdrawal Modal */}
      {showWithdrawModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-md w-full p-6">
            <h3 className="text-xl font-semibold text-gray-900 mb-4">
              Withdraw Funds
            </h3>

            <div className="mb-6 p-4 bg-blue-50 rounded-lg">
              <p className="text-sm text-blue-800">
                Withdrawals are sent directly to your bank account and typically
                arrive within 2-3 business days.
              </p>
            </div>

            <div className="mb-6 p-4 bg-gray-50 rounded-lg border-2 border-dashed border-gray-200">
              <p className="text-sm text-gray-700 text-center mb-3">
                Want instant access to your money?
              </p>
              <Link
                to="/debitcard"
                className="block w-full bg-purple-600 hover:bg-purple-700 text-white text-center py-2 px-4 rounded-lg font-medium transition-colors"
              >
                Apply for a Debit Card
              </Link>
            </div>

            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Available Balance:{" "}
                {wallet ? formatMoney(wallet.balance_cents) : "$0.00"}
              </label>
            </div>

            <div className="mb-4">
              <label className="flex items-center mb-3">
                <input
                  type="checkbox"
                  checked={withdrawAllSelected}
                  onChange={(e) => {
                    setWithdrawAllSelected(e.target.checked);
                    if (e.target.checked) {
                      setWithdrawalAmount("");
                    }
                  }}
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
                <span className="ml-2 text-sm text-gray-700">
                  Withdraw all funds
                </span>
              </label>

              {!withdrawAllSelected && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Custom Amount (USD)
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    min="1"
                    max={wallet ? wallet.balance_cents / 100 : 0}
                    value={withdrawalAmount}
                    onChange={(e) => setWithdrawalAmount(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Enter amount"
                  />
                </div>
              )}
            </div>

            <p className="text-xs text-gray-500 mb-6">
              Minimum withdrawal is $1.00 USD
            </p>

            {errors.withdrawal && (
              <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
                {errors.withdrawal}
              </div>
            )}

            <div className="flex space-x-3">
              <button
                onClick={() => {
                  setShowWithdrawModal(false);
                  setWithdrawalAmount("");
                  setWithdrawAllSelected(false);
                  setErrors((prev) => ({ ...prev, withdrawal: null }));
                }}
                className="flex-1 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleWithdrawal}
                disabled={
                  loading.withdrawal ||
                  (!withdrawAllSelected && !withdrawalAmount)
                }
                className="flex-1 px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 rounded-md transition-colors"
              >
                {loading.withdrawal ? "Processing..." : "Withdraw"}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default WalletPage;

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: ["./index.html", "./src/**/*.{js,jsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react({
    include: "**/*.{jsx,js}"
  })],
})
